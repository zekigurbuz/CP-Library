struct BigInteger {
  public: int sign;
  string s;

  BigInteger(): s("") {}

  BigInteger(string x) {
    * this = x;
  }

  BigInteger(int x) {
    * this = to_string(x);
  }

  BigInteger negative() {
    BigInteger x = * this;

    x.sign *= -1;

    return x;
  }

  BigInteger normalize(int newSign) {
    for (int a = s.size() - 1; a > 0 && s[a] == '0'; a--)
      s.erase(s.begin() + a);

    sign = (s.size() == 1 && s[0] == '0' ? 1 : newSign);

    return *this;
  }

  void operator = (string x) {
    int newSign = (x[0] == '-' ? -1 : 1);

    s = (newSign == -1 ? x.substr(1) : x);

    reverse(s.begin(), s.end());

    this - > normalize(newSign);
  }

  bool operator == (const BigInteger & x) const {
    return (s == x.s && sign == x.sign);
  }

  bool operator < (const BigInteger & x) const {
    if (sign != x.sign) return sign < x.sign;

    if (s.size() != x.s.size())
      return (sign == 1 ? s.size() < x.s.size() : s.size() > x.s.size());

    for (int a = s.size() - 1; a >= 0; a--)
      if (s[a] != x.s[a])
        return (sign == 1 ? s[a] < x.s[a] : s[a] > x.s[a]);

    return false;
  }

  bool operator <= (const BigInteger & x) const {
    return ( * this < x || * this == x);
  }

  bool operator > (const BigInteger & x) const {
    return (!( * this < x) && !( * this == x));
  }

  bool operator >= (const BigInteger & x) const {
    return ( * this > x || * this == x);
  }

  BigInteger operator + (BigInteger x) {
    BigInteger curr = * this;

    if (curr.sign != x.sign) return curr - x.negative();

    BigInteger res;

    for (int a = 0, carry = 0; a < s.size() || a < x.s.size() || carry; a++) {
      carry += (a < curr.s.size() ? curr.s[a] - '0' : 0) + (a < x.s.size() ? x.s[a] - '0' : 0);

      res.s += (carry % 10 + '0');

      carry /= 10;
    }

    return res.normalize(sign);
  }

  BigInteger operator - (BigInteger x) {
    BigInteger curr = * this;

    if (curr.sign != x.sign) return curr + x.negative();

    int realSign = curr.sign;

    curr.sign = x.sign = 1;

    if (curr < x) return ((x - curr).negative()).normalize(-realSign);

    BigInteger res;

    for (int a = 0, borrow = 0; a < s.size(); a++) {
      borrow = (curr.s[a] - borrow - (a < x.s.size() ? x.s[a] : '0'));

      res.s += (borrow >= 0 ? borrow + '0' : borrow + '0' + 10);

      borrow = (borrow >= 0 ? 0 : 1);
    }

    return res.normalize(realSign);
  }

  BigInteger operator * (BigInteger x) {
    BigInteger res("0");

    for (int a = 0, b = s[a] - '0'; a < s.size(); a++, b = s[a] - '0') {
      while (b--) res = (res + x);

      x.s.insert(x.s.begin(), '0');
    }

    return res.normalize(sign * x.sign);
  }

  BigInteger operator / (BigInteger x) {
    if (x.s.size() == 1 && x.s[0] == '0') x.s[0] /= (x.s[0] - '0');

    BigInteger temp("0"), res;

    for (int a = 0; a < s.size(); a++)
      res.s += "0";

    int newSign = sign * x.sign;

    x.sign = 1;

    for (int a = s.size() - 1; a >= 0; a--) {
      temp.s.insert(temp.s.begin(), '0');
      temp = temp + s.substr(a, 1);

      while (!(temp < x)) {
        temp = temp - x;
        res.s[a]++;
      }
    }

    return res.normalize(newSign);
  }

  BigInteger operator % (BigInteger x) {
    if (x.s.size() == 1 && x.s[0] == '0') x.s[0] /= (x.s[0] - '0');

    BigInteger res("0");

    x.sign = 1;

    for (int a = s.size() - 1; a >= 0; a--) {
      res.s.insert(res.s.begin(), '0');

      res = res + s.substr(a, 1);

      while (!(res < x))
        res = res - x;
    }

    return res.normalize(sign);
  }

  string toString() const {
    string ret = s;

    reverse(ret.begin(), ret.end());

    return (sign == -1 ? "-" : "") + ret;
  }

  BigInteger toBase10(int base) {
    BigInteger exp(1), res("0"), BASE(base);

    for (int a = 0; a < s.size(); a++) {
      int curr = (s[a] < '0' || s[a] > '9' ? (toupper(s[a]) - 'A' + 10) : (s[a] - '0'));

      res = res + (exp * BigInteger(curr));
      exp = exp * BASE;
    }

    return res.normalize(sign);
  }

  BigInteger toBase10(int base, BigInteger mod) {
    BigInteger exp(1), res("0"), BASE(base);

    for (int a = 0; a < s.size(); a++) {
      int curr = (s[a] < '0' || s[a] > '9' ? (toupper(s[a]) - 'A' + 10) : (s[a] - '0'));

      res = (res + ((exp * BigInteger(curr) % mod)) % mod);
      exp = ((exp * BASE) % mod);
    }

    return res.normalize(sign);
  }

  string convertToBase(int base) {
    BigInteger ZERO(0), BASE(base), x = * this;
    string modes = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    if (x == ZERO)
      return "0";

    string res = "";

    while (x > ZERO) {
      BigInteger mod = x % BASE;

      x = x - mod;

      if (x > ZERO)
        x = x / BASE;

      res = modes[stoi(mod.toString())] + res;
    }

    return res;
  }

  BigInteger toBase(int base) {
    return BigInteger(this - > convertToBase(base));
  }

  friend ostream & operator << (ostream & os,
    const BigInteger & x) {
    os << x.toString();

    return os;
  }
};
