struct DSU {
    vector<int> par;
    vector<int> sz;
    int NS;
    DSU(int n) {
        NS = n;
        par.resize(n);
        sz.resize(n, 1);
        for (int i = 0; i < n; ++i) par[i] = i;
    }
    int parent(int i) {
        return par[i] == i ? i : (par[i] = parent(par[i]));
    }
    void unify(int i, int j) {
        int a = parent(i), b = parent(j);
        if (a==b) return;
        --NS;
        if (sz[a] < sz[b]) {
            par[a] = b;
            sz[b] += sz[a];
        }
        else {
            par[b] = a;
            sz[a] += sz[b];
        }
    }
    bool same(int i, int j) {
        return parent(i) == parent(j);
    }
    int size(int i) {
        return sz[parent(i)];
    }
};
