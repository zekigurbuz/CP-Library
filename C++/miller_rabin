int p0w(int n, int p, int m) {
  if (p == 0) return 1;
  if (p == 1) return n % m;
  if (p % 2 == 0) {
    int t = p0w(n, p / 2, m);
    return t % m * t % m % m;
  }
  int t = p0w(n, p / 2, m);
  t = t % m * t % m % m;
  return t % m * n % m % m;
}
bool composite(int n, int a, int d, int s) {
	int x = p0w(a, d, n);
	if (x == 1 || x == n - 1) return 0;
	rep(r, 1, s + 1) {
		x = x * x % n;
		if (x == n - 1) return 0;
	}
	return 1;
}
bool isPrime(int n) {
	if (n < 2) return 0;
	int r = 0;
	int d = n - 1;
	while (!(d & 1)) {
		d >>= 1;
		r++;
	}
	for (int a : {2, 3, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37}) {
		if (n == a) return 1;
		if (composite(n, a, d, r)) return 0;
	}
	return 1;
}
