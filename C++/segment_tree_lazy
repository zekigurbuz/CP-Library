struct LazyST {
  int nullVal = imin;

  vi tree;
  vi updates;
  int n;

  LazyST(int nn, vi initArr) {
    n = (int) pow(2, ceil(log(nn) / log(2)));
    tree.resize(2 * n - 1, 0);
    updates.resize(2 * n - 1, 0);
    for (int i = 0; i < initArr.size(); i++) {
      tree[i + n - 1] = initArr[i];
    }
    for (int i = tree.size() - 1; i >= 0; --i) recalc(i);
  }

  LazyST(int nn) {
    n = (int) pow(2, ceil(log(nn) / log(2)));
    tree.resize(2 * n - 1, 0);
    updates.resize(2 * n - 1, 0);
    for (int i = tree.size() - 1; i >= 0; --i) recalc(i);
  }

  int combine(int a, int b) {
    return max(a, b);
  }

  void apply(int idx, int u) {
    updates[idx] += u;
    tree[idx] += u;
  }

  void set(int idx, int k) {
    int curr = idx + n - 1;
    tree[curr] = k;

    while (curr > 0) {
      curr = p(curr);
      recalc(curr);
    }
  }

  void update(int left, int right, int diff) {
    update(0, 0, n - 1, diff, left, right);
  }

  void processLazy(int idx) {
    if (l(idx) < tree.size()) apply(l(idx), updates[idx]);
    if (r(idx) < tree.size()) apply(r(idx), updates[idx]);

    updates[idx] = 0;
  }

  void update(int idx, int il, int ir, int delta, int ul, int ur) {
    if (ul <= il && ir <= ur) {
      apply(idx, delta);
      return;
    }
    if (il > ur || ir < ul) return;

    processLazy(idx);

    int mid = (il + ir) / 2;
    update(l(idx), il, mid, delta, ul, ur);
    update(r(idx), mid + 1, ir, delta, ul, ur);

    recalc(idx);
  }

  int query(int left, int right) {
    return query(0, left, right, 0, n - 1);
  }

  int query(int idx, int ql, int qr, int il, int ir) {
    if (ql <= il && ir <= qr) return tree[idx];
    if (ql > ir || qr < il) return nullVal;
    processLazy(idx);

    int mid = (il + ir) / 2;
    return combine(query(l(idx), ql, qr, il, mid), query(r(idx), ql, qr, mid + 1, ir));
  }

  void recalc(int idx) {
    if (l(idx) < tree.size()) {
      tree[idx] = tree[l(idx)];
      if (r(idx) < tree.size()) {
        tree[idx] = combine(tree[idx], tree[r(idx)]);
      }
    }
  }

  int p(int n) {
    return (n - 1) / 2;
  }

  int l(int n) {
    return 2 * n + 1;
  }

  int r(int n) {
    return l(n) + 1;
  }

};
