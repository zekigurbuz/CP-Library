struct segtree {
	vi tree;
	vi lazy;
	vi arr;
	int sz;
 
	void build(int node, int a, int b, vi s, int N) {
		arr = s;
		sz = N;
		tree.resize(3 * N, 0);
		lazy.resize(3 * N, 0);
		build(node, a, b);
	}
 
	void build(int node, int a, int b){
		if(a == b){
			tree[node] = arr[a];
			return;
		}
		build(node*2, a, (a+b)/2);
		build(node*2+1, (a+b)/2+1, b);
		tree[node] = min(tree[node*2], tree[node*2+1]);
	}
	void upd(int node, int a, int b, int i, int j, int val){
		if(a > j || b < i || b < a) return;
    
		if(lazy[node] != 0){
			tree[node] += lazy[node];
			if(a != b){
				lazy[node*2] += lazy[node];
				lazy[node*2+1] += lazy[node];
			}
			lazy[node] = 0;
		}
 
		if(i <= a && b <= j){
			tree[node] += val;
			if(a != b){
				lazy[node*2] += val;
				lazy[node*2+1] += val;
			}
			return;
		}
 
		upd(node*2, a, (a+b)/2, i, j, val);
		upd(node*2+1, 1+(a+b)/2, b, i, j, val);
		tree[node] = min(tree[node*2], tree[node*2+1]);
	}
	int que(int node, int a, int b, int i, int j){
		if(lazy[node] != 0){
			tree[node] += lazy[node];
			if(a != b){
				lazy[node*2] += lazy[node];
				lazy[node*2+1] += lazy[node];
			}
			lazy[node] = 0;
		}
 
		if(a > j || b < i || b < a) return INT_MAX;
	
		if(i <= a && b <= j){
			return tree[node];
		}
		
		int q1 = que(node*2, a, (a+b)/2, i, j);
		int q2 = que(node*2+1, 1+(a+b)/2, b, i, j);
		return min(q1, q2);
	}
};
