public static class Pair<A, B> implements Comparable {
		public A fi;
		public B se;
		public Pair(A fi, B se) {
			this.fi = fi;
			this.se = se;
		}
		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			Pair<?, ?> p = (Pair<?, ?>) o;
			if (!fi.equals(p.fi)) return false;
			return se.equals(p.se);
		}
		@Override
		public int hashCode() {
			return 31 * fi.hashCode() + se.hashCode();
		}
		@Override
		public String toString() {
			return fi.toString() + " " + se.toString();
		}
		public static <A, B> Pair <A, B> of (A a, B b) {
			return new Pair<A, B>(a, b);
		}
		public int compareTo(Object o) {
			Pair<?, ?> p = (Pair<?, ?>) o;
			if (fi.equals(p.fi)) return ((Comparable)se).compareTo(p.se);
			return ((Comparable)fi).compareTo(p.fi);
		}
	}
